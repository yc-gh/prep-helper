{
  "name": "Data Structures and Algorithms",
  "topics": [
    {
      "name": "Arrays",
      "questions": [
        {
          "question": "Find the Duplicate Number",
          "link": "https://leetcode.com/problems/find-the-duplicate-number/"
        },
        {
          "question": "Contains Duplicate",
          "link": "https://leetcode.com/problems/contains-duplicate/"
        },
        {
          "question": "Single Number",
          "link": "https://leetcode.com/problems/single-number/"
        },
        {
          "question": "Product of Array Except Self",
          "link": "https://leetcode.com/problems/product-of-array-except-self/"
        },
        {
          "question": "Maximum Subarray",
          "link": "https://leetcode.com/problems/maximum-subarray/"
        },
        {
          "question": "Maximum Product Subarray",
          "link": "https://leetcode.com/problems/maximum-product-subarray/"
        },
        {
          "question": "Find Minimum in Rotated Sorted Array",
          "link": "https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/"
        },
        {
          "question": "Search in Rotated Sorted Array",
          "link": "https://leetcode.com/problems/search-in-rotated-sorted-array/"
        },
        {
          "question": "3Sum",
          "link": "https://leetcode.com/problems/3sum/"
        },
        {
          "question": "Container With Most Water",
          "link": "https://leetcode.com/problems/container-with-most-water/"
        },
        {
          "question": "Best Time to Buy and Sell Stock",
          "link": "https://leetcode.com/problems/best-time-to-buy-and-sell-stock/"
        },
        {
          "question": "Maximum Profit in Job Scheduling",
          "link": "https://leetcode.com/problems/maximum-profit-in-job-scheduling/"
        },
        {
          "question": "Maximum Length of Pair Chain",
          "link": "https://leetcode.com/problems/maximum-length-of-pair-chain/"
        },
        {
          "question": "Partition Equal Subset Sum",
          "link": "https://leetcode.com/problems/partition-equal-subset-sum/"
        },
        {
          "question": "Kth Largest Element in an Array",
          "link": "https://leetcode.com/problems/kth-largest-element-in-an-array/"
        },
        {
          "question": "Wiggle Subsequence",
          "link": "https://leetcode.com/problems/wiggle-subsequence/"
        }
      ]
    },
    {
      "name": "Strings",
      "questions": [
        {
          "question": "Reverse String",
          "link": "https://leetcode.com/problems/reverse-string/"
        },
        {
          "question": "Reverse Integer",
          "link": "https://leetcode.com/problems/reverse-integer/"
        },
        {
          "question": "First Unique Character in a String",
          "link": "https://leetcode.com/problems/first-unique-character-in-a-string/"
        },
        {
          "question": "Valid Anagram",
          "link": "https://leetcode.com/problems/valid-anagram/"
        },
        {
          "question": "Valid Palindrome",
          "link": "https://leetcode.com/problems/valid-palindrome/"
        },
        {
          "question": "String to Integer (atoi)",
          "link": "https://leetcode.com/problems/string-to-integer-atoi/"
        },
        {
          "question": "Implement strStr()",
          "link": "https://leetcode.com/problems/implement-strstr/"
        },
        {
          "question": "Count and Say",
          "link": "https://leetcode.com/problems/count-and-say/"
        },
        {
          "question": "Longest Common Prefix",
          "link": "https://leetcode.com/problems/longest-common-prefix/"
        },
        {
          "question": "Group Anagrams",
          "link": "https://leetcode.com/problems/group-anagrams/"
        },
        {
          "question": "Valid Parentheses",
          "link": "https://leetcode.com/problems/valid-parentheses/"
        },
        {
          "question": "Generate Parentheses",
          "link": "https://leetcode.com/problems/generate-parentheses/"
        },
        {
          "question": "Longest Valid Parentheses",
          "link": "https://leetcode.com/problems/longest-valid-parentheses/"
        },
        {
          "question": "Basic Calculator",
          "link": "https://leetcode.com/problems/basic-calculator/"
        },
        {
          "question": "Decode String",
          "link": "https://leetcode.com/problems/decode-string/"
        },
        {
          "question": "Encode and Decode Strings",
          "link": "https://leetcode.com/problems/encode-and-decode-strings/"
        }
      ]
    },
    {
      "name": "Linked Lists",
      "questions": [
        {
          "question": "Reverse Linked List",
          "link": "https://leetcode.com/problems/reverse-linked-list/"
        },
        {
          "question": "Detect Cycle in a Linked List",
          "link": "https://leetcode.com/problems/detect-cycle-in-a-linked-list/"
        },
        {
          "question": "Merge Two Sorted Lists",
          "link": "https://leetcode.com/problems/merge-two-sorted-lists/"
        },
        {
          "question": "Merge K Sorted Lists",
          "link": "https://leetcode.com/problems/merge-k-sorted-lists/"
        },
        {
          "question": "Remove Nth Node From End of List",
          "link": "https://leetcode.com/problems/remove-nth-node-from-end-of-list/"
        },
        {
          "question": "Reorder List",
          "link": "https://leetcode.com/problems/reorder-list/"
        },
        {
          "question": "Copy List with Random Pointer",
          "link": "https://leetcode.com/problems/copy-list-with-random-pointer/"
        },
        {
          "question": "LRU Cache",
          "link": "https://leetcode.com/problems/lru-cache/"
        },
        {
          "question": "Design Circular Deque",
          "link": "https://leetcode.com/problems/design-circular-deque/"
        },
        {
          "question": "Design Linked List",
          "link": "https://leetcode.com/problems/design-linked-list/"
        }
      ]
    },
    {
      "name": "Stacks and Queues",
      "questions": [
        {
          "question": "Valid Parentheses",
          "link": "https://leetcode.com/problems/valid-parentheses/"
        },
        {
          "question": "Min Stack",
          "link": "https://leetcode.com/problems/min-stack/"
        },
        {
          "question": "Implement Queue using Stacks",
          "link": "https://leetcode.com/problems/implement-queue-using-stacks/"
        },
        {
          "question": "Implement Stack using Queues",
          "link": "https://leetcode.com/problems/implement-stack-using-queues/"
        },
        {
          "question": "Sliding Window Maximum",
          "link": "https://leetcode.com/problems/sliding-window-maximum/"
        },
        {
          "question": "Design Circular Queue",
          "link": "https://leetcode.com/problems/design-circular-queue/"
        },
        {
          "question": "Design a Stack With Increment Operation",
          "link": "https://leetcode.com/problems/design-a-stack-with-increment-operation/"
        }
      ]
    },
    {
      "name": "Sorting and Searching",
      "questions": [
        {
          "question": "Merge Sorted Array",
          "link": "https://leetcode.com/problems/merge-sorted-array/"
        },
        {
          "question": "Sort Colors",
          "link": "https://leetcode.com/problems/sort-colors/"
        },
        {
          "question": "First Bad Version",
          "link": "https://leetcode.com/problems/first-bad-version/"
        },
        {
          "question": "Search in Rotated Sorted Array",
          "link": "https://leetcode.com/problems/search-in-rotated-sorted-array/"
        },
        {
          "question": "Search a 2D Matrix",
          "link": "https://leetcode.com/problems/search-a-2d-matrix/"
        },
        {
          "question": "Find Minimum in Rotated Sorted Array",
          "link": "https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/"
        },
        {
          "question": "Search Insert Position",
          "link": "https://leetcode.com/problems/search-insert-position/"
        },
        {
          "question": "Peak Index in a Mountain Array",
          "link": "https://leetcode.com/problems/peak-index-in-a-mountain-array/"
        },
        {
          "question": "Find First and Last Position of Element in Sorted Array",
          "link": "https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/"
        },
        {
          "question": "Search a 2D Matrix II",
          "link": "https://leetcode.com/problems/search-a-2d-matrix-ii/"
        },
        {
          "question": "Find K Closest Elements",
          "link": "https://leetcode.com/problems/find-k-closest-elements/"
        },
        {
          "question": "Find Peak Element",
          "link": "https://leetcode.com/problems/find-peak-element/"
        },
        {
          "question": "Search a Sorted Array in Descending Order",
          "link": "https://leetcode.com/problems/search-a-sorted-array-in-descending-order/"
        },
        {
          "question": "Capacity To Ship Packages Within D Days",
          "link": "https://leetcode.com/problems/capacity-to-ship-packages-within-d-days/"
        },
        {
          "question": "Koko Eating Bananas",
          "link": "https://leetcode.com/problems/koko-eating-bananas/"
        }
      ]
    },
    {
      "name": "Math",
      "questions": [
        {
          "question": "Fizz Buzz",
          "link": "https://leetcode.com/problems/fizz-buzz/"
        },
        {
          "question": "Count Primes",
          "link": "https://leetcode.com/problems/count-primes/"
        },
        {
          "question": "Power of Three",
          "link": "https://leetcode.com/problems/power-of-three/"
        },
        {
          "question": "Roman to Integer",
          "link": "https://leetcode.com/problems/roman-to-integer/"
        },
        {
          "question": "Integer to Roman",
          "link": "https://leetcode.com/problems/integer-to-roman/"
        },
        {
          "question": "Excel Sheet Column Number",
          "link": "https://leetcode.com/problems/excel-sheet-column-number/"
        },
        {
          "question": "Excel Sheet Column Title",
          "link": "https://leetcode.com/problems/excel-sheet-column-title/"
        },
        {
          "question": "Factorial Trailing Zeroes",
          "link": "https://leetcode.com/problems/factorial-trailing-zeroes/"
        },
        {
          "question": "Valid Perfect Square",
          "link": "https://leetcode.com/problems/valid-perfect-square/"
        },
        {
          "question": "Sqrt(x)",
          "link": "https://leetcode.com/problems/sqrtx/"
        },
        {
          "question": "Sum of Two Integers",
          "link": "https://leetcode.com/problems/sum-of-two-integers/"
        },
        {
          "question": "Add Digits",
          "link": "https://leetcode.com/problems/add-digits/"
        },
        {
          "question": "Maximum Product of Three Numbers",
          "link": "https://leetcode.com/problems/maximum-product-of-three-numbers/"
        },
        {
          "question": "Nth Digit",
          "link": "https://leetcode.com/problems/nth-digit/"
        },
        {
          "question": "Rectangle Area",
          "link": "https://leetcode.com/problems/rectangle-area/"
        },
        {
          "question": "Integer Break",
          "link": "https://leetcode.com/problems/integer-break/"
        }
      ]
    },
    {
      "name": "Recursion",
      "questions": [
        {
          "question": "Reverse String",
          "link": "https://leetcode.com/problems/reverse-string/"
        },
        {
          "question": "Swap Nodes in Pairs",
          "link": "https://leetcode.com/problems/swap-nodes-in-pairs/"
        },
        {
          "question": "Reverse Linked List",
          "link": "https://leetcode.com/problems/reverse-linked-list/"
        },
        {
          "question": "Reverse Linked List II",
          "link": "https://leetcode.com/problems/reverse-linked-list-ii/"
        },
        {
          "question": "Reverse Nodes in k-Group",
          "link": "https://leetcode.com/problems/reverse-nodes-in-k-group/"
        },
        {
          "question": "Swap Nodes in Pairs",
          "link": "https://leetcode.com/problems/swap-nodes-in-pairs/"
        },
        {
          "question": "Reverse Bits",
          "link": "https://leetcode.com/problems/reverse-bits/"
        },
        {
          "question": "Add Two Numbers",
          "link": "https://leetcode.com/problems/add-two-numbers/"
        },
        {
          "question": "Add Two Numbers II",
          "link": "https://leetcode.com/problems/add-two-numbers-ii/"
        },
        {
          "question": "Add Strings",
          "link": "https://leetcode.com/problems/add-strings/"
        },
        {
          "question": "Multiply Strings",
          "link": "https://leetcode.com/problems/multiply-strings/"
        },
        {
          "question": "Sum of Two Integers",
          "link": "https://leetcode.com/problems/sum-of-two-integers/"
        },
        {
          "question": "Divide Two Integers",
          "link": "https://leetcode.com/problems/divide-two-integers/"
        },
        {
          "question": "Pow(x, n)",
          "link": "https://leetcode.com/problems/powx-n/"
        },
        {
          "question": "Sqrt(x)",
          "link": "https://leetcode.com/problems/sqrtx/"
        },
        {
          "question": "Climbing Stairs",
          "link": "https://leetcode.com/problems/climbing-stairs/"
        }
      ]
    },
    {
      "name": "Bit Manipulation",
      "questions": [
        {
          "question": "Number of 1 Bits",
          "link": "https://leetcode.com/problems/number-of-1-bits/"
        },
        {
          "question": "Reverse Bits",
          "link": "https://leetcode.com/problems/reverse-bits/"
        },
        {
          "question": "Single Number",
          "link": "https://leetcode.com/problems/single-number/"
        },
        {
          "question": "Hamming Distance",
          "link": "https://leetcode.com/problems/hamming-distance/"
        },
        {
          "question": "Binary Gap",
          "link": "https://leetcode.com/problems/binary-gap/"
        },
        {
          "question": "Counting Bits",
          "link": "https://leetcode.com/problems/counting-bits/"
        },
        {
          "question": "Power of Two",
          "link": "https://leetcode.com/problems/power-of-two/"
        },
        {
          "question": "Power of Four",
          "link": "https://leetcode.com/problems/power-of-four/"
        },
        {
          "question": "Find the Difference",
          "link": "https://leetcode.com/problems/find-the-difference/"
        },
        {
          "question": "Bitwise AND of Numbers Range",
          "link": "https://leetcode.com/problems/bitwise-and-of-numbers-range/"
        },
        {
          "question": "Count Binary Substrings",
          "link": "https://leetcode.com/problems/count-binary-substrings/"
        },
        {
          "question": "Maximum XOR of Two Numbers in an Array",
          "link": "https://leetcode.com/problems/maximum-xor-of-two-numbers-in-an-array/"
        },
        {
          "question": "Single Number II",
          "link": "https://leetcode.com/problems/single-number-ii/"
        },
        {
          "question": "Single Number III",
          "link": "https://leetcode.com/problems/single-number-iii/"
        },
        {
          "question": "Bitwise ORs of Subarrays",
          "link": "https://leetcode.com/problems/bitwise-ors-of-subarrays/"
        },
        {
          "question": "Count Triplets That Can Form Two Arrays of Equal XOR",
          "link": "https://leetcode.com/problems/count-triplets-that-can-form-two-arrays-of-equal-xor/"
        }
      ]
    },
    {
      "name": "Trees",
      "questions": [
        {
          "question": "Maximum Depth of Binary Tree",
          "link": "https://leetcode.com/problems/maximum-depth-of-binary-tree/"
        },
        {
          "question": "Same Tree",
          "link": "https://leetcode.com/problems/same-tree/"
        },
        {
          "question": "Invert Binary Tree",
          "link": "https://leetcode.com/problems/invert-binary-tree/"
        },
        {
          "question": "Binary Tree Maximum Path Sum",
          "link": "https://leetcode.com/problems/binary-tree-maximum-path-sum/"
        },
        {
          "question": "Binary Tree Level Order Traversal",
          "link": "https://leetcode.com/problems/binary-tree-level-order-traversal/"
        },
        {
          "question": "Serialize and Deserialize Binary Tree",
          "link": "https://leetcode.com/problems/serialize-and-deserialize-binary-tree/"
        },
        {
          "question": "Subtree of Another Tree",
          "link": "https://leetcode.com/problems/subtree-of-another-tree/"
        },
        {
          "question": "Construct Binary Tree from Preorder and Inorder Traversal",
          "link": "https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/"
        },
        {
          "question": "Validate Binary Search Tree",
          "link": "https://leetcode.com/problems/validate-binary-search-tree/"
        },
        {
          "question": "Kth Smallest Element in a BST",
          "link": "https://leetcode.com/problems/kth-smallest-element-in-a-bst/"
        },
        {
          "question": "Lowest Common Ancestor of a Binary Tree",
          "link": "https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/"
        },
        {
          "question": "Binary Tree Right Side View",
          "link": "https://leetcode.com/problems/binary-tree-right-side-view/"
        },
        {
          "question": "Count Complete Tree Nodes",
          "link": "https://leetcode.com/problems/count-complete-tree-nodes/"
        },
        {
          "question": "Populating Next Right Pointers in Each Node",
          "link": "https://leetcode.com/problems/populating-next-right-pointers-in-each-node/"
        },
        {
          "question": "Find Bottom Left Tree Value",
          "link": "https://leetcode.com/problems/find-bottom-left-tree-value/"
        },
        {
          "question": "Binary Tree Zigzag Level Order Traversal",
          "link": "https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/"
        }
      ]
    },
    {
      "name": "Graphs",
      "questions": [
        {
          "question": "Clone Graph",
          "link": "https://leetcode.com/problems/clone-graph/"
        },
        {
          "question": "Course Schedule",
          "link": "https://leetcode.com/problems/course-schedule/"
        },
        {
          "question": "Pacific Atlantic Water Flow",
          "link": "https://leetcode.com/problems/pacific-atlantic-water-flow/"
        },
        {
          "question": "Number of Islands",
          "link": "https://leetcode.com/problems/number-of-islands/"
        },
        {
          "question": "Longest Consecutive Sequence",
          "link": "https://leetcode.com/problems/longest-consecutive-sequence/"
        },
        {
          "question": "Alien Dictionary",
          "link": "https://leetcode.com/problems/alien-dictionary/"
        },
        {
          "question": "Graph Valid Tree",
          "link": "https://leetcode.com/problems/graph-valid-tree/"
        },
        {
          "question": "Number of Connected Components in an Undirected Graph",
          "link": "https://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph/"
        },
        {
          "question": "Network Delay Time",
          "link": "https://leetcode.com/problems/network-delay-time/"
        },
        {
          "question": "Cheapest Flights Within K Stops",
          "link": "https://leetcode.com/problems/cheapest-flights-within-k-stops/"
        },
        {
          "question": "Find the City With the Smallest Number of Neighbors at a Threshold Distance",
          "link": "https://leetcode.com/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/"
        }
      ]
    },
    {
      "name": "Dynamic Programming",
      "questions": [
        {
          "question": "Minimum Path Sum",
          "link": "https://leetcode.com/problems/minimum-path-sum/"
        },
        {
          "question": "Unique Paths",
          "link": "https://leetcode.com/problems/unique-paths/"
        },
        {
          "question": "Unique Paths II",
          "link": "https://leetcode.com/problems/unique-paths-ii/"
        },
        {
          "question": "Coin Change",
          "link": "https://leetcode.com/problems/coin-change/",
          "hints": "var coinChange = function(coins, amount) {\n    const minCoins = Infinity;\n    const memo = Array(amount + 1).fill();\n\n\n    const backtrack = function (a) {\n        if (a === 0) {\n            return 0;\n        }\n        else if (a < 0) {\n            return Infinity;\n        }\n\n        if (memo[a]) {\n            return memo[a];\n        }\n\n        let min = Infinity;\n\n        for(let c of coins) {\n            min = Math.min(min, backtrack(a - c));\n        }\n\n        return memo[a] = min === Infinity ? Infinity : 1 + min;\n    }\n\n    const res = backtrack(amount);\n\n    return res === Infinity ? -1 : res;\n};"
        },
        {
          "question": "Word Break",
          "link": "https://leetcode.com/problems/word-break/",
          "hints": "var wordBreak = function (s, wordDict) {\n    const memo = {};\n\n    const backtrack = (str) => {\n        if(memo[str] !== undefined) {\n            return memo[str];\n        }\n        \n        if (!str) {\n            return true;\n        }\n\n        for (let i = str.length; i > 0; i--) {\n            const substr = str.substring(0, i);\n            if (wordDict.includes(substr)) {\n                const remainingStr = str.substring(i);\n                const backtrackRes = backtrack(remainingStr);\n                if (backtrackRes) {\n                    return memo[remainingStr] = true;\n                }\n            }\n        }\n\n        return memo[str] = false;\n    }\n\n    return backtrack(s);\n};"
        },
        {
          "question": "Longest Increasing Subsequence",
          "link": "https://leetcode.com/problems/longest-increasing-subsequence/"
        },
        {
          "question": "Longest Common Subsequence",
          "link": "https://leetcode.com/problems/longest-common-subsequence/"
        },
        {
          "question": "Edit Distance",
          "link": "https://leetcode.com/problems/edit-distance/"
        },
        {
          "question": "House Robber",
          "link": "https://leetcode.com/problems/house-robber/"
        },
        {
          "question": "House Robber II",
          "link": "https://leetcode.com/problems/house-robber-ii/"
        },
        {
          "question": "Decode Ways",
          "link": "https://leetcode.com/problems/decode-ways/"
        },
        {
          "question": "Jump Game",
          "link": "https://leetcode.com/problems/jump-game/"
        },
        {
          "question": "Jump Game II",
          "link": "https://leetcode.com/problems/jump-game-ii/"
        },
        {
          "question": "Coin Change 2",
          "link": "https://leetcode.com/problems/coin-change-2/"
        },
        {
          "question": "Longest Palindromic Subsequence",
          "link": "https://leetcode.com/problems/longest-palindromic-subsequence/"
        },
        {
          "question": "Longest Palindromic Substring",
          "link": "https://leetcode.com/problems/longest-palindromic-substring/"
        },
        {
          "question": "Palindrome Partitioning",
          "link": "https://leetcode.com/problems/palindrome-partitioning/"
        },
        {
          "question": "Regular Expression Matching",
          "link": "https://leetcode.com/problems/regular-expression-matching/"
        },
        {
          "question": "Wildcard Matching",
          "link": "https : //leetcode.com/problems/wildcard-matching/"
        },
        {
          "question": "Longest Valid Parentheses",
          "link": "https://leetcode.com/problems/longest-valid-parentheses/"
        },
        {
          "question": "Distinct Subsequences",
          "link": "https://leetcode.com/problems/distinct-subsequences/"
        },
        {
          "question": "Maximum Product Subarray",
          "link": "https://leetcode.com/problems/maximum-product-subarray/"
        },
        {
          "question": "Maximum Length of Pair Chain",
          "link": "https://leetcode.com/problems/maximum-length-of-pair-chain/"
        },
        {
          "question": "Partition Equal Subset Sum",
          "link": "https://leetcode.com/problems/partition-equal-subset-sum/"
        },
        {
          "question": "Minimum Cost For Tickets",
          "link": "https://leetcode.com/problems/minimum-cost-for-tickets/"
        },
        {
          "question": "Minimum Swaps To Make Sequences Increasing",
          "link": "https://leetcode.com/problems/minimum-swaps-to-make-sequences-increasing/"
        },
        {
          "question": "Minimum ASCII Delete Sum for Two Strings",
          "link": "https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/"
        },
        {
          "question": "Maximum Sum of 3 Non-Overlapping Subarrays",
          "link": "https://leetcode.com/problems/maximum-sum-of-3-non-overlapping-subarrays/"
        },
        {
          "question": "Delete Operation for Two Strings",
          "link": "https://leetcode.com/problems/delete-operation-for-two-strings/"
        },
        {
          "question": "Strange Printer",
          "link": "https://leetcode.com/problems/strange-printer/"
        },
        {
          "question": "Minimum Number of Refueling Stops",
          "link": "https://leetcode.com/problems/minimum-number-of-refueling-stops/"
        },
        {
          "question": "Minimum Falling Path Sum",
          "link": "https://leetcode.com/problems/minimum-falling-path-sum/"
        },
        {
          "question": "Maximum Length of Repeated Subarray",
          "link": "https://leetcode.com/problems/maximum-length-of-repeated-subarray/"
        },
        {
          "question": "Minimum Swaps To Group All 1's Together",
          "link": "https://leetcode.com/problems/minimum-swaps-to-group-all-1s-together/"
        }
      ]
    },
    {
      "name": "Design",
      "questions": [
        {
          "question": "Design Circular Queue",
          "link": "https://leetcode.com/problems/design-circular-queue/"
        },
        {
          "question": "Design Circular Deque",
          "link": "https://leetcode.com/problems/design-circular-deque/"
        },
        {
          "question": "Design Linked List",
          "link": "https://leetcode.com/problems/design-linked-list/"
        },
        {
          "question": "LRU Cache",
          "link": "https://leetcode.com/problems/lru-cache/"
        },
        {
          "question": "Insert Delete GetRandom O(1)",
          "link": "https://leetcode.com/problems/insert-delete-getrandom-o1/"
        },
        {
          "question": "Serialize and Deserialize Binary Tree",
          "link": "https://leetcode.com/problems/serialize-and-deserialize-binary-tree/"
        },
        {
          "question": "Serialize and Deserialize BST",
          "link": "https://leetcode.com/problems/serialize-and-deserialize-bst/"
        },
        {
          "question": "Design In-Memory File System",
          "link": "https://leetcode.com/problems/design-in-memory-file-system/"
        },
        {
          "question": "Design Tic-Tac-Toe",
          "link": "https://leetcode.com/problems/design-tic-tac-toe/"
        },
        {
          "question": "Design Snake Game",
          "link": "https://leetcode.com/problems/design-snake-game/"
        },
        {
          "question": "Design Search Autocomplete System",
          "link": "https://leetcode.com/problems/design-search-autocomplete-system/"
        },
        {
          "question": "Design Browser History",
          "link": "https://leetcode.com/problems/design-browser-history/"
        },
        {
          "question": "Design Underground System",
          "link": "https://leetcode.com/problems/design-underground-system/"
        },
        {
          "question": "Design Front Middle Back Queue",
          "link": "https://leetcode.com/problems/design-front-middle-back-queue/"
        },
        {
          "question": "Design File Sharing System",
          "link": "https://leetcode.com/problems/design-file-sharing-system/"
        },
        {
          "question": "Design Movie Rental System",
          "link": "https://leetcode.com/problems/design-movie-rental-system/"
        }
      ]
    },
    {
      "name": "Miscellaneous",
      "questions": [
        {
          "question": "Shuffle an Array",
          "link": "https://leetcode.com/problems/shuffle-an-array/"
        },
        {
          "question": "Random Pick with Weight",
          "link": "https://leetcode.com/problems/random-pick-with-weight/"
        },
        {
          "question": "Insert Delete GetRandom O(1)",
          "link": "https://leetcode.com/problems/insert-delete-getrandom-o1/"
        },
        {
          "question": "Random Pick Index",
          "link": "https://leetcode.com/problems/random-pick-index/"
        },
        {
          "question": "Random Pick with Blacklist",
          "link": "https://leetcode.com/problems/random-pick-with-blacklist/"
        },
        {
          "question": "Random Point in Non-overlapping Rectangles",
          "link": "https://leetcode.com/problems/random-point-in-non-overlapping-rectangles/"
        },
        {
          "question": "Random Pick with Random Weight",
          "link": "https://leetcode.com/problems/random-pick-with-random-weight/"
        },
        {
          "question": "Random Flip Matrix",
          "link": "https://leetcode.com/problems/random-flip-matrix/"
        },
        {
          "question": "Random Output from Stream",
          "link": "https://leetcode.com/problems/random-output-from-stream/"
        },
        {
          "question": "Random Pick with Linked List",
          "link": "https://leetcode.com/problems/random-pick-with-linked-list/"
        },
        {
          "question": "Random Pick with Weight",
          "link": "https://leetcode.com/problems/random-pick-with-weight/"
        },
        {
          "question": "Random Point in Circle",
          "link": "https://leetcode.com/problems/random-point-in-circle/"
        },
        {
          "question": "Random Pick with Blacklist",
          "link": "https://leetcode.com/problems/random-pick-with-blacklist/"
        },
        {
          "question": "Random Pick with Weight",
          "link": "https://leetcode.com/problems/random-pick-with-weight/"
        },
        {
          "question": "Random Point in Non-overlapping Rectangles",
          "link": "https://leetcode.com/problems/random-point-in-non-overlapping-rectangles/"
        },
        {
          "question": "Random Pick with Random Weight",
          "link": "https://leetcode.com/problems/random-pick-with-random-weight/"
        }
      ]
    },
    {
      "name": "Concurrency",
      "questions": [
        {
          "question": "Print in Order",
          "link": "https://leetcode.com/problems/print-in-order/"
        },
        {
          "question": "Fizz Buzz Multithreaded",
          "link": "https://leetcode.com/problems/fizz-buzz-multithreaded/"
        },
        {
          "question": "Dining Philosophers",
          "link": "https://leetcode.com/problems/the-dining-philosophers/"
        },
        {
          "question": "Zero Even Odd",
          "link": "https://leetcode.com/problems/print-zero-even-odd/"
        },
        {
          "question": "Building H2O",
          "link": "https://leetcode.com/problems/building-h2o/"
        },
        {
          "question": "Print FooBar Alternately",
          "link": "https://leetcode.com/problems/print-foobar-alternately/"
        },
        {
          "question": "H2O",
          "link": "https://leetcode.com/problems/building-h2o/"
        },
        {
          "question": "Print Zero Even Odd",
          "link": "https://leetcode.com/problems/print-zero-even-odd/"
        },
        {
          "question": "Print FooBar Alternately",
          "link": "https://leetcode.com/problems/print-foobar-alternately/"
        },
        {
          "question": "Print in Order",
          "link": "https://leetcode.com/problems/print-in-order/"
        },
        {
          "question": "Print Zero Even Odd",
          "link": "https://leetcode.com/problems/print-zero-even-odd/"
        },
        {
          "question": "Print FooBar Alternately",
          "link": "https://leetcode.com/problems/print-foobar-alternately/"
        },
        {
          "question": "Print in Order",
          "link": "https://leetcode.com/problems/print-in-order/"
        },
        {
          "question": "Print Zero Even Odd",
          "link": "https://leetcode.com/problems/print-zero-even-odd/"
        },
        {
          "question": "Print FooBar Alternately",
          "link": "https://leetcode.com/problems/print-foobar-alternately/"
        }
      ]
    },
    {
      "name": "Top 150",
      "questions": [
        {
          "question": "Merge Sorted Array",
          "link": "https://leetcode.com/problems/merge-sorted-array/",
          "hints": "Start from the rear of both arrays and compare the elements.\nPlace the larger element at the end of the first array.",
          "code": "var merge = function(nums1, m, nums2, n) {\n    let i = m - 1, j = n - 1, k = m + n - 1;\n\n    while(i >= 0 && j >= 0) {\n        if(nums1[i] > nums2[j]) {\n            nums1[k--] = nums1[i--];\n        }\n        else {\n            nums1[k--] = nums2[j--];\n        }\n    }\n\n    while(i >= 0) {\n        nums1[k--] = nums1[i--];\n    }\n\n    while(j >= 0) {\n        nums1[k--] = nums2[j--];\n    }\n};",
          "complexity": "Time: O(n)\nSpace: O(1)"
        },
        {
          "question": "Remove Element",
          "link": "https://leetcode.com/problems/remove-element/",
          "hints": "Use two pointers.\nOne to iterate the array and the other to keep track of the position to place the next element.",
          "code": "var removeElement = function(nums, val) {\n    let k = 0, i = 0, n = nums.length;\n\n    while(i < n) {\n        if(nums[i] !== val) {\n            nums[k++] = nums[i];\n        }\n        i++;\n    }\n\n    return k;\n};",
          "complexity": "Time: O(n)\nSpace: O(1)"
        },
        {
          "question": "Remove Duplicates from Sorted Array",
          "link": "https://leetcode.com/problems/remove-duplicates-from-sorted-array/",
          "hints": "Use two pointers.\nOne to iterate the array and the other to keep track of the position to place the next element (eg. k).\nIf the current element is different from the element at k, place the current element at the second pointer and increment the second pointer.",
          "code": "var removeDuplicates = function(nums) {\n    let k = 0;\n    const n = nums.length;\n\n    for(let i = 1; i < n; i++) {\n        if(nums[i] !== nums[k]) {\n            nums[++k] = nums[i];\n        }\n    }\n\n    return k + 1;\n};",
          "complexity": "Time: O(n)\nSpace: O(1)"
        },
        {
          "question": "Remove Duplicates from Sorted Array II",
          "link": "https://leetcode.com/problems/remove-duplicates-from-sorted-array-ii/",
          "hints": "Similar to Remove Duplicates from Sorted Array, add an additional OR check so that values are copied only if value at k index is not equal to value at k - 1 index.",
          "code": "var removeDuplicates = function(nums) {\n    const n = nums.length;\n    let k = 0;\n\n    for(let i = 1; i < n; i++) {\n        if(nums[i] !== nums[k] || nums[k] !== nums[k-1]) {\n            nums[++k] = nums[i];\n        }\n    }\n\n    return k + 1;\n};",
          "complexity": "Time: O(n)\nSpace: O(1)"
        },
        {
          "question": "Majority Element",
          "link": "https://leetcode.com/problems/majority-element/",
          "hints": "Use Boyer-Moore Voting Algorithm.\nInitialize a counter and a candidate element.\nIterate through the array and if the counter is 0, update the candidate element.\nIf the current element is the same as the candidate element, increment the counter, else decrement the counter.\nReturn the candidate element.",
          "code": "var majorityElement = function(nums) {\n    const n = nums.length;\n    let majElement = nums[0], votes = 0;\n\n    for(let i = 0; i < n; i++) {\n        if(votes === 0) {\n            majElement = nums[i];\n        }\n        \n        if(nums[i] === majElement) {\n            votes++;\n        }\n        else {\n            votes--;   \n        }\n    }\n\n    return majElement;\n};",
          "complexity": "Time: O(n)\nSpace: O(1)"
        }
      ]
    }
  ]
}
